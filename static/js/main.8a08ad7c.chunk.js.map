{"version":3,"sources":["firebase/firebase.util.js","hooks/useFirestore.js","gallery/imageFlex.component.jsx","gallery/title.component.jsx","hooks/useStorage.js","gallery/progressBar.component.jsx","gallery/uploadform.component.jsx","App.js","serviceWorker.js","index.js"],"names":["firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","projectFirestore","projectStorage","timestamp","FieldValue","serverTimestamp","useFirestore","collection","useState","docs","setDocs","useEffect","unsub","orderBy","onSnapshot","snap","documents","forEach","doc","push","data","id","console","log","ImageGrid","className","data-aos","map","key","src","url","alt","Title","useStorage","file","progress","setProgress","error","setError","setUrl","storageRef","ref","name","collectionRef","put","on","percentage","bytesTransferred","totalBytes","err","a","createdAt","getDownloadURL","add","ProgressBar","setFile","style","width","UploadForm","types","type","onChange","e","selected","target","files","includes","App","AOS","init","duration","delay","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.8a08ad7c.chunk.js","sourcesContent":["import * as firebase from \"firebase/app\";\r\nimport \"firebase/firestore\";\r\nimport \"firebase/storage\";\r\n\r\nconst config = {\r\n  apiKey: \"AIzaSyCvTJ_w0Jrdt4Cy4XviajSQhM-sQXGi_mM\",\r\n  authDomain: \"gallery-80432.firebaseapp.com\",\r\n  databaseURL: \"https://gallery-80432.firebaseio.com\",\r\n  projectId: \"gallery-80432\",\r\n  storageBucket: \"gallery-80432.appspot.com\",\r\n  messagingSenderId: \"743512798317\",\r\n  appId: \"1:743512798317:web:dd3ee88536f5b569cc3b64\",\r\n  measurementId: \"G-0T96DW7VHC\",\r\n};\r\n//code here\r\nfirebase.initializeApp(config);\r\nexport const projectFirestore = firebase.firestore();\r\nexport const projectStorage = firebase.storage();\r\nexport const timestamp = firebase.firestore.FieldValue.serverTimestamp;\r\nexport default firebase;\r\n","import { useState, useEffect } from \"react\";\r\nimport { projectFirestore } from \"../firebase/firebase.util\";\r\n\r\nconst useFirestore = (collection) => {\r\n  const [docs, setDocs] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const unsub = projectFirestore.collection(collection);\r\n    unsub.orderBy(\"createdAt\", \"desc\").onSnapshot((snap) => {\r\n      //console.log(snap);\r\n      let documents = [];\r\n      // snap.docs.map((doc) => {\r\n      //documents.push({ ...doc.data(), id: doc.id });\r\n      //  return documents;\r\n      // });\r\n      snap.forEach((doc) => {\r\n        documents.push({ ...doc.data(), id: doc.id });\r\n      });\r\n      console.log(documents);\r\n      setDocs(documents);\r\n    });\r\n\r\n    return () => unsub();\r\n  }, [collection]);\r\n\r\n  return { docs };\r\n};\r\n\r\nexport default useFirestore;\r\n","import React from \"react\";\r\nimport useFirestore from \"../hooks/useFirestore\";\r\nimport \"./image.style.scss\";\r\n\r\nconst ImageGrid = () => {\r\n  const { docs } = useFirestore(\"images\");\r\n  return (\r\n    <div className=\"img-flex\" data-aos={\"fade-up\"}>\r\n      {docs &&\r\n        docs.map((doc) => (\r\n          <div className=\"img-wrap\" key={doc.id}>\r\n            <img src={doc.url} alt=\"uploaded pic\" />\r\n          </div>\r\n        ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ImageGrid;\r\n","import React from \"react\";\r\nimport \"./title.style.scss\";\r\n\r\nconst Title = () => {\r\n  return (\r\n    <div className=\"title\">\r\n      <h1 data-aos={\"fade-right\"}>FireGallery</h1>\r\n      <h2 data-aos={\"fade-left\"}>Your Picure</h2>\r\n      <p data-aos={\"fade-left\"}>\r\n        Lorem ipsum dolor sit, amet consectetur adipisicing elit.\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Title;\r\n","import { useState, useEffect } from \"react\";\r\nimport {\r\n  projectStorage,\r\n  projectFirestore,\r\n  timestamp,\r\n} from \"../firebase/firebase.util\";\r\n\r\nconst useStorage = (file) => {\r\n  const [progress, setProgress] = useState(0);\r\n  const [error, setError] = useState(null);\r\n  const [url, setUrl] = useState(null);\r\n\r\n  useEffect(() => {\r\n    // references\r\n    const storageRef = projectStorage.ref(file.name);\r\n    const collectionRef = projectFirestore.collection(\"images\");\r\n    storageRef.put(file).on(\r\n      \"state_changed\",\r\n      (snap) => {\r\n        let percentage = (snap.bytesTransferred / snap.totalBytes) * 100;\r\n        setProgress(percentage);\r\n      },\r\n      (err) => {\r\n        setError(err);\r\n      },\r\n      async () => {\r\n        //not same url from above\r\n        //const createdAt = new Date();\r\n        const createdAt = timestamp();\r\n        const url = await storageRef.getDownloadURL();\r\n        collectionRef.add({ url, createdAt });\r\n        setUrl(url);\r\n      }\r\n    );\r\n  }, [file]);\r\n  //setted values\r\n  return { progress, url, error };\r\n};\r\n\r\nexport default useStorage;\r\n","import React, { useEffect } from \"react\";\r\nimport useStorage from \"../hooks/useStorage\";\r\nimport \"./progress.style.scss\";\r\nconst ProgressBar = ({ file, setFile }) => {\r\n  const { url, progress } = useStorage(file);\r\n  console.log(progress, url);\r\n  useEffect(() => {\r\n    if (url) {\r\n      setFile(null);\r\n    }\r\n  }, [url, setFile]);\r\n  return <div className=\"progress-bar\" style={{ width: progress + \"%\" }}></div>;\r\n};\r\n\r\nexport default ProgressBar;\r\n","import React, { useState } from \"react\";\r\nimport ProgressBar from \"./progressBar.component\";\r\nimport \"./uploadform.style.scss\";\r\nconst UploadForm = () => {\r\n  const [file, setFile] = useState(null);\r\n  const [error, setError] = useState(null);\r\n  const types = [\"image/png\", \"image/jpeg\"];\r\n  const changeHandler = (e) => {\r\n    let selected = e.target.files[0];\r\n    if (selected && types.includes(selected.type)) {\r\n      setFile(selected);\r\n      setError(null);\r\n    } else {\r\n      setFile(null);\r\n      setError(\"Please select an image file (png or jpeg)\");\r\n    }\r\n  };\r\n  return (\r\n    <form>\r\n      <label data-aos={\"fade-right\"}>\r\n        <input type=\"file\" onChange={changeHandler} />\r\n        <span>+</span>\r\n      </label>\r\n      <div className=\"output\">\r\n        {error ? <div className=\"error\">{error}</div> : null}\r\n        {file && <div>{file.name}</div>}\r\n        {file && <ProgressBar file={file} setFile={setFile} />}\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default UploadForm;\r\n","import React from \"react\";\nimport ImageGrid from \"./gallery/imageFlex.component\";\nimport Title from \"./gallery/title.component\";\nimport UploadForm from \"./gallery/uploadform.component\";\nimport AOS from \"aos\";\nimport \"aos/dist/aos.css\";\nimport SimpleReactLightbox from \"simple-react-lightbox\";\nimport { SRLWrapper } from \"simple-react-lightbox\";\nfunction App() {\n  AOS.init({\n    duration: 600,\n    delay: 1000,\n  });\n  return (\n    <div className=\"App\">\n      <SimpleReactLightbox>\n        <SRLWrapper>\n          <Title />\n          <UploadForm />\n          <ImageGrid />\n        </SRLWrapper>\n      </SimpleReactLightbox>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}